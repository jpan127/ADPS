#pragma once
// Project libraries
#include "common.h"
// Autogenerated packet structure
#include "packet_structure.h"



/**
 *  @module      : packet
 *  @description : Handles parsing command packets and sending diagnostic packets
 */

// Helper macros for logging to server
// Use these instead of directly using log_to_server()
#define LOG_INFO(message, ...)   (log_to_server(packet_type_info,   message, ## __VA_ARGS__))
#define LOG_ERROR(message, ...)  (log_to_server(packet_type_error,  message, ## __VA_ARGS__))
#define LOG_STATUS(message, ...) (log_to_server(packet_type_status, message, ## __VA_ARGS__))
#define LOG_LOG(message, ...)    (log_to_server(packet_type_log,    message, ## __VA_ARGS__))

extern QueueHandle_t MessageTxQueue;
extern QueueHandle_t MessageRxQueue;

/// Denotes the current state of the parser
typedef enum
{
    parser_status_idle = 0,
    parser_status_in_progress,
    parser_status_complete,
    parser_status_error,
} parser_status_E;

/// Packet logging struct
typedef struct
{
    uint32_t rx_packets;                                ///< Number of received packets
    uint32_t tx_packets;                                ///< Number of transmitted packets
    uint32_t packets_dropped;                           ///< Number of packets dropped
    uint32_t packet_counts[packet_type_last_invalid];   ///< Number of packets for each type
} packet_logs_S;

/**
 *  State machine to parse a command packet
 *  @param byte   : The next byte to be parsed
 *  @param packet : Pointer to the packet to be modified
 *  @returns      : Status of parser state machine
 */
parser_status_E command_packet_parser(const uint8_t * const buffer, command_packet_S * const packet);

/**
 *  Printf-style printing a formatted string to the server
 *      1. log_to_server
 *      2. log_vsprintf
 *      3. create_diagnostic_packet
 *      4. msg_enqueue_no_timeout
 * @param type    : The type of the packet
 * @param message : The string format
 */
void log_to_server(const packet_type_E type, const char * message, ...);

/**
 *  Inline wrappers for logging log data
 *      - uint32_t
 *      - float
 *      - const char *
 */
inline void log_data(const char * message, const uint8_t category, const uint32_t * data)    { if (data && message) LOG_LOG(message, category, *data); }
inline void log_data_float(const char * message, const uint8_t category, const float * data) { if (data && message) LOG_LOG(message, category, *data); }
inline void log_data_string(const char * message, const uint8_t category, const char * data) { if (data && message) LOG_LOG(message, category,  data); }

/// Returns a pointer to the packet logging struct
packet_logs_S * packet_get_logs(void);
